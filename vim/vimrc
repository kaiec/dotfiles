:set encoding=utf-8
:set fileencoding=utf-8

set nocompatible

set background=dark
set t_Co=256

"" vim:fdm=expr:fdl=0
"" vim:fde=getline(v\:lnum)=~'^""'?'>'.(matchend(getline(v\:lnum),'""*')-2)\:'='


""" Plugins
" set the runtime path to include Vundle and initialize
set rtp+=~/dotfiles/vim/bundle/Vundle.vim
filetype off                  " required by vundle

"--------------------------------------------
" call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
call vundle#begin('~/dotfiles/vim/bundle')
" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
Plugin 'tpope/vim-fugitive' 			" GIT support
Plugin 'kien/ctrlp.vim'				" quick file browser
Plugin 'scrooloose/nerdtree'			" file tree
Plugin 'vimwiki/vimwiki'			" Wiki style markdown
Plugin 'davidhalter/jedi-vim'			" auto completion
Plugin 'mhartington/oceanic-next'		" color scheme
Plugin 'dhruvasagar/vim-table-mode'		" edit tables
Plugin 'vim-syntastic/syntastic'		" Syntax checker

" All of your Plugins must be added before the following line
call vundle#end()            " required
"--------------------------------------------

filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just
" :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal

" SEE :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

""" Common Stuff


syntax on
filetype plugin indent on
set showcmd
set laststatus=2
" backspace behaves normal
set backspace=indent,eol,start
" Cursor moves over beginning and end of lines
set whichwrap+=<,>,[,]
" Cursor moves over visual lines
noremap  <buffer> <silent> <Up>   gk
noremap  <buffer> <silent> <Down> gj
inoremap <buffer> <silent> <Up>   <C-o>gk
inoremap <buffer> <silent> <Down> <C-o>gj


" When editing a file, always jump to the last known cursor position.
" Don't do it when the position is invalid or when inside an event handler
" (happens when dropping a file on gvim).
autocmd BufReadPost *
  \ if line("'\"") >= 1 && line("'\"") <= line("$") |
  \   exe "normal! g`\"" |
  \ endif

""" Markdown
	
" Markdown support for .md files
au BufNewFile,BufFilePre,BufRead *.md set filetype=markdown

" NERDTree toggle
map <C-n> :NERDTreeFind<CR>
let NERDTreeQuitOnOpen=1

" vimwiki - Personal Wiki for Vim
" https://github.com/vimwiki/vimwiki

" vimwiki with markdown support
let g:vimwiki_ext2syntax = {'.md': 'markdown', '.markdown': 'markdown', '.mdown': 'markdown'}
" helppage -> :h vimwiki-syntax 

" vim-instant-markdown - Instant Markdown previews from Vim
" https://github.com/suan/vim-instant-markdown
let g:instant_markdown_autostart = 0	" disable autostart
map <leader>md :InstantMarkdownPreview<CR>

" Notizen
nmap <F12> :NERDTree ~/Dropbox/Notizen<CR>
nmap <S-F12> :e ~/Dropbox/Notizen/scratch.md<CR>Go<CR>### <C-R>=strftime('%Y-%m-%d %H:%M:')<CR> 
map <LEADER>d :put=strftime('%Y-%m-%d')<CR>10la


""" Key Mappings
let mapleader = "ä"

nnoremap ö :
nnoremap Ö :
vnoremap ö :
vnoremap Ö :

" Let's try to get rid of the arrows...
" noremap <Left> <nop>
" noremap <Right> <nop>
" noremap <Up> <nop>
" noremap <Down> <nop>
" noremap! <Left> <nop>
" noremap! <Right> <nop>
" noremap! <Up> <nop>
" noremap! <Down> <nop>
" noremap! <PageDown> <nop>
" noremap <PageDown> <nop>
" noremap! <PageUp> <nop>
" noremap <PageUp> <nop>
" noremap! <Down> <nop>
" let g:BASH_Ctrl_j = 'off'

nnoremap <C-H> <C-W>h
nnoremap <C-J> <C-W>j
nnoremap <C-K> <C-W>k
nnoremap <C-L> <C-W>l

inoremap <C-H> <Left>
inoremap <C-J> <Down>
inoremap <C-K> <Up>
inoremap <C-L> <Right>

inoremap <C-S> <esc>:w<cr>
nnoremap <C-S> :w<cr>

nnoremap <C-Q> :qa<cr>
inoremap <C-Q> <esc>:qa<cr>
vnoremap < <gv
vnoremap > >gv

" clear search highlight with esc
nnoremap <esc> :noh<return><esc>

""" Color Scheme
" Theme
syntax enable
colorscheme OceanicNext



""" Line Numbers
set number relativenumber
" https://jeffkreeftmeijer.com/vim-number/
:augroup numbertoggle
:  autocmd!
:  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
:  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
:augroup END
" highlight LineNr ctermfg=5 ctermbg=4
" highlight CursorLineNr ctermfg=5 ctermbg=4

""" Line Limit
set colorcolumn=81
highlight ColorColumn ctermbg=4 ctermfg=255

""" Folding 
" Enable folding with the spacebar
nnoremap <tab> za
nnoremap <S-tab> zM

""" Python 
au BufNewFile,BufRead *.py
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set textwidth=79 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix

let g:python_host_prog = '/home/kai/.pyenv/versions/neovim2/bin/python'
let g:python3_host_prog = '/home/kai/.pyenv/versions/neovim3/bin/python'
""" Clipboard
vnoremap <leader>c :!xclip -i -f<cr> 
nnoremap <leader>v :r!xclip -o<cr>
""" HTML, CSS 
au BufNewFile,BufRead *.js, *.html, *.css
    \ set tabstop=2
    \ set softtabstop=2
    \ set shiftwidth=2


""" Misc 
command! VRC :e ~/dotfiles/vim/vimrc

""" Mail
" Add format option 'w' to add trailing white space, indicating that paragraph
" continues on next line. This is to be used with mutt's 'text_flowed' option.
augroup mail_trailing_whitespace " {
    autocmd!
    autocmd FileType mail setlocal formatoptions+=w
    autocmd FileType mail setlocal textwidth=72
augroup END " }

" Transparent Background
hi Normal guibg=none ctermbg=none
hi NonText guibg=none ctermbg=none
hi EndOfBuffer guibg=none ctermbg=none

" persistent undo
" tell it to use an undo file
set undofile
" set a directory to store the undo history
set undodir=~/.vimundo/


" completion
" http://vim.wikia.com/wiki/VimTip1386
:set completeopt=longest,menuone
:inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Syntastic Syntax Checking
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
