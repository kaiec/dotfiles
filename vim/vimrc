set encoding=utf-8
set fileencoding=utf-8

set nocompatible
let mapleader = ","

" -------------------- Plugins --------------------{{{1
" set the runtime path to include Vundle and initialize
set rtp+=~/dotfiles/vim/bundle/Vundle.vim
set rtp+=~/.fzf
filetype off                  " required by vundle

" call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
call vundle#begin('~/dotfiles/vim/bundle')
" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
Plugin 'tpope/vim-fugitive' 			" GIT support
Plugin 'kien/ctrlp.vim'				" quick file browser
Plugin 'scrooloose/nerdtree'			" file tree
Plugin 'nelstrom/vim-markdown-folding'		" Markdown Folding
Plugin 'vim-pandoc/vim-pandoc'		" Markdown Pandoc
Plugin 'vim-pandoc/vim-pandoc-syntax'		" Markdown Pandoc
Plugin 'vimwiki/vimwiki'			" Wiki style markdown
Plugin 'davidhalter/jedi-vim'			" auto completion
Plugin 'mhartington/oceanic-next'		" color scheme
Plugin 'altercation/vim-colors-solarized'   " solarized
Plugin 'dhruvasagar/vim-table-mode'		" edit tables
Plugin 'vim-syntastic/syntastic'		" Syntax checker
Plugin 'tell-k/vim-autopep8'		" Autopep8
Plugin 'sotte/presenting.vim'			" Presentations
Plugin 'moll/vim-node'				" Node.js
Plugin 'maksimr/vim-jsbeautify'			" Javascript Formatting
Plugin 'dylanaraps/wal.vim'			" WAL color schem
Plugin 'ap/vim-css-color'			" Show CSS colors
Plugin 'junegunn/goyo.vim'			" Zen mode
Plugin 'junegunn/fzf.vim'			" Fuzzy Find

" All of your Plugins must be added before the following line
call vundle#end()            " required

filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just
" :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal

" SEE :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

" -------------------- Common Stuff --------------------{{{1


syntax on
filetype plugin indent on
set showcmd
set autochdir
set nomodeline

" -------------------- Status line --------------------{{{1
set laststatus=2
" set statusline=[%n]\ %t
function! GitBranch()
   return system("git rev-parse --abbrev-ref HEAD 2>/dev/null | tr -d '\n'")
endfunction

function! StatuslineGit()
   let l:branchname = GitBranch()
   return strlen(l:branchname) > 0?'  '.l:branchname.' ':''
endfunction

set statusline=
set statusline+=%#PmenuSel#
set statusline+=%{StatuslineGit()}
set statusline+=%#CursorColumn#
set statusline+=\ %f
set statusline+=\ %m
set statusline+=%=
set statusline+=%#CursorColumn#
set statusline+=\ %y
set statusline+=\ %{&fileencoding?&fileencoding:&encoding}
set statusline+=\ [%{&fileformat}\]
set statusline+=\ %p%%
set statusline+=\ %l:%c
set statusline+=\ 

" -------------------- Sane defaults --------------------{{{1 

" backspace behaves normal
set backspace=indent,eol,start
" Cursor moves over beginning and end of lines
set whichwrap+=<,>,[,]
" Cursor moves over visual lines
nnoremap  <buffer> <silent> <Up>   gk
nnoremap  <buffer> <silent> <Down> gj
inoremap <expr> <buffer> <silent> <Up> pumvisible() ? '<C-P>' : '<C-O>gk'
inoremap <expr> <buffer> <silent> <Down> pumvisible() ? '<C-N>' : '<C-O>gj' 

" -------------------- Cursor --------------------{{{1
"
" When editing a file, always jump to the last known cursor position.
" Don't do it when the position is invalid or when inside an event handler
" (happens when dropping a file on gvim).
autocmd BufReadPost *
         \ if line("'\"") >= 1 && line("'\"") <= line("$") |
         \   exe "normal! g`\"" |
         \ endif

" Different cursor shapes in different modes.
let &guicursor = 'n-v-c-sm:block-blinkwait1000-blinkon500-blinkoff500,'
         \          . 'i-c-ci-ve:ver25-blinkwait1000-blinkon500-blinkoff500,'
         \          . 'r-cr-o:hor20-blinkwait1000-blinkon500-blinkoff500'



" -------------------- Key Mappings --------------------{{{1

nnoremap ö :
nnoremap Ö :
vnoremap ö :
vnoremap Ö :

nnoremap <C-H> <C-W>h
nnoremap <C-J> <C-W>j
nnoremap <C-K> <C-W>k
nnoremap <C-L> <C-W>l

inoremap <C-H> <Left>
inoremap <C-J> <Down>
inoremap <C-K> <Up>
inoremap <C-L> <Right>

inoremap <C-S> <esc>:w<cr>
nnoremap <C-S> :w<cr>

nnoremap <C-Q> :qa<cr>
inoremap <C-Q> <esc>:qa<cr>
vnoremap < <gv
vnoremap > >gv

" Rewrap current paragraph without moving cursor
nnoremap Q gwip

" FZF, Search
nnoremap <C-B> :Buffers<cr>

" clear search highlight with esc
" nnoremap <esc> :noh<return><esc>
" remapping esc leads to strange sideffects in standard vim


" CTRL-C to copy to system clipboard
map <C-c> "+y<CR>

if has("nvim")
   tnoremap <Esc> <C-\><C-n>
endif

" -------------------- Nerdtree --------------------{{{1

" NERDTree toggle
map <C-n> :NERDTreeFind<CR>
let NERDTreeQuitOnOpen=1

" -------------------- Vimwiki --------------------{{{1

" vimwiki - Personal Wiki for Vim
" https://github.com/vimwiki/vimwiki

" vimwiki with markdown support
" let g:vimwiki_ext2syntax = {'.md': 'markdown', '.markdown': 'markdown', '.mdown': 'markdown'}
" helppage -> :h vimwiki-syntax 
let g:vimwiki_list = [{'path': '~/Dropbox/Notizen/', 'ext': '.md', 'syntax': 'markdown'}]
" No vimiwiki support for md files outside the wiki
let g:vimwiki_global_ext = 0


" Notizen
nmap <F12> :NERDTree ~/Dropbox/Notizen<CR>
" F24 should be S-F12
nmap <F24> :e ~/Dropbox/Notizen/scratch.md<CR>Go<CR>### <C-R>=strftime('%Y-%m-%d %H:%M:')<CR> 
nnoremap <F36> :cd ~/Dropbox/Notizen<cr>:Ag<space>
map <LEADER>d :put=strftime('%Y-%m-%d')<CR>10la

" Call mutt with current line, hopefully containing a message id
nnoremap <leader>m yy:terminal ~/dotfiles/mutt/muttjumpwrapper '<c-r><c-o>"'<enter>


" Create a new todo
" for todo.txt: nnoremap <leader>tf :call system("~/dotfiles/bin/vim2task 'vim:<" . expand("%:p") . ">'")<enter>:redraw!<enter>
nnoremap <leader>t :call system("~/dotfiles/bin/vim2task '" . expand("%:p") ."'")<enter>:redraw!<enter>

" Copy current file path to clipboard
nnoremap <leader>c :let @+=expand("%:p")<CR>

" -------------------- Color Scheme --------------------{{{1
set background=dark
set t_Co=256
" Theme
syntax enable
colorscheme solarized 



" -------------------- Line Numbers --------------------{{{1
let g:numbertoggle=1
set number relativenumber
" https://jeffkreeftmeijer.com/vim-number/
function! RelNum ()
   if g:numbertoggle
      set relativenumber
   endif
endfunction
function! AbsNum ()
   if g:numbertoggle
      set norelativenumber
   endif
endfunction

augroup numbertoggle
   autocmd!
   autocmd BufEnter,FocusGained,InsertLeave * :call RelNum() 
   autocmd BufLeave,FocusLost,InsertEnter   * :call AbsNum()
augroup END
" highlight LineNr ctermfg=5 ctermbg=4
" highlight CursorLineNr ctermfg=5 ctermbg=4

" -------------------- Line Limit --------------------{{{1

call matchadd('ColorColumn', '\%81v', 100)
highlight ColorColumn ctermbg=208 ctermfg=black
"                                                         This is how it looks: foo

" -------------------- Warn color in insert mode --------------------{{{1

highlight  CursorLine ctermbg=124 ctermfg=15
autocmd InsertEnter * set cursorline 
autocmd InsertLeave * set nocursorline 

" -------------------- Folding  --------------------{{{1
" Enable folding with the spacebar
nnoremap <tab> za
nnoremap <S-tab> zM




" -------------------- Misc  --------------------{{{1
command! VRC :e ~/dotfiles/vim/vimrc

" Mail
" Add format option 'w' to add trailing white space, indicating that paragraph
" continues on next line. This is to be used with mutt's 'text_flowed' option.
augroup mail_trailing_whitespace " {
   autocmd!
   autocmd FileType mail setlocal formatoptions+=w
   autocmd FileType mail setlocal textwidth=72
augroup END " }

" Transparent Background
hi Normal guibg=none ctermbg=none
hi NonText guibg=none ctermbg=none
hi EndOfBuffer guibg=none ctermbg=none

" persistent undo
" tell it to use an undo file
set undofile
" set a directory to store the undo history
set undodir=~/.vimundo/


" completion
" http://vim.wikia.com/wiki/VimTip1386
set completeopt=longest,menuone
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Syntastic Syntax Checking
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0


" -------------------- Goyo, Zen Mode --------------------{{{1 
function! s:goyo_enter()
   let g:numbertoggle=0
   set nonumber norelativenumber
   set linebreak
endfunction

function! s:goyo_leave()
   let g:numbertoggle=1
   set number relativenumber
   set nolinebreak
endfunction

autocmd! User GoyoEnter nested call <SID>goyo_enter()
autocmd! User GoyoLeave nested call <SID>goyo_leave()


