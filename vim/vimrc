set encoding=utf-8
set fileencoding=utf-8

set nocompatible
let mapleader=" "

" -------------------- Plugins --------------------{{{1
set rtp+=~/dotfiles/vim/vim-plug
set rtp+=~/.fzf
filetype off

call plug#begin('~/dotfiles/vim/bundle')
Plug 'tpope/vim-fugitive' 			" GIT support
Plug 'tpope/vim-surround' 			" GIT support
" Plug 'ctrlpvim/ctrlp.vim'				" quick file browser
Plug 'scrooloose/nerdtree'			" file tree
Plug 'nelstrom/vim-markdown-folding'		" Markdown Folding
Plug 'vim-pandoc/vim-pandoc'		" Markdown Pandoc
Plug 'vim-pandoc/vim-pandoc-syntax'		" Markdown Pandoc
Plug 'tpope/vim-markdown'       " Markdown support
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }, 'for': ['markdown', 'vim-plug']}
Plug 'junegunn/vim-easy-align'  " Align Markdown Tables and other stuff
Plug 'vimwiki/vimwiki'			" Wiki style markdown
Plug 'tbabej/taskwiki'			" Taskwarrior integration
Plug 'farseer90718/vim-taskwarrior' " Taskwarriot interface
" Plug 'davidhalter/jedi-vim'			" auto completion
Plug 'neoclide/coc.nvim', {'branch': 'release'}			" auto completion
Plug 'mhartington/oceanic-next'		" color scheme
Plug 'altercation/vim-colors-solarized'   " solarized
Plug 'dhruvasagar/vim-table-mode'		" edit tables
" Plug 'vim-syntastic/syntastic'		" Syntax checker
" Plug 'tell-k/vim-autopep8'		" Autopep8
Plug 'calviken/vim-gdscript3'
Plug 'sotte/presenting.vim'			" Presentations
" Plug 'moll/vim-node'				" Node.js
Plug 'maksimr/vim-jsbeautify'			" Javascript Formatting
Plug 'dylanaraps/wal.vim'			" WAL color schem
Plug 'junegunn/goyo.vim'			" Zen mode
Plug 'junegunn/fzf.vim'			" Fuzzy Find
Plug 'SirVer/ultisnips'       " Snippets
Plug 'honza/vim-snippets'     " Collection of default snippets
Plug 'ap/vim-css-color'       " Hex Color highlighting.
Plug 'mattn/emmet-vim'       " HTML auto competion magic.
Plug 'ferrine/md-img-paste.vim'       " Image paste in markdown
Plug 'machakann/vim-highlightedyank'   " Highlight yanked text
Plug 'easymotion/vim-easymotion'   " Easymotion
Plug 'tpope/vim-surround' " Add surrounding parentheses et al.
Plug 'tpope/vim-repeat' " Repeat for surround
" Plug 'jiangmiao/auto-pairs' " Auto closing of parentheses
Plug 'roman/golden-ratio' " automatic resizing of splits
Plug 'niklasl/vim-rdf' " RDF syntax
Plug 'lervag/vimtex' " Latex
" Plug 'jpalardy/vim-slime' " REPL support
" Plug 'jupyter-vim/jupyter-vim' " Jupyter support
Plug 'bfredl/nvim-ipy'
call plug#end()

filetype plugin indent on    " required


" -------------------- Common Stuff --------------------{{{1


syntax on
filetype plugin indent on
set showcmd
set nomodeline
set mouse=a
set inccommand=nosplit

" -------------------- Status line --------------------{{{1
set laststatus=2
" set statusline=[%n]\ %t
function! GitBranch()
   return system("git rev-parse --abbrev-ref HEAD 2>/dev/null | tr -d '\n'")
endfunction

function! StatuslineGit()
   let l:branchname = GitBranch()
   return strlen(l:branchname) > 0?'  '.l:branchname.' ':''
endfunction

set statusline=
set statusline+=%#PmenuSel#
" set statusline+=%{StatuslineGit()}
set statusline+=%#CursorColumn#
set statusline+=\ %f
set statusline+=\ %m
set statusline+=%=
set statusline+=%#CursorColumn#
set statusline+=\ %y
set statusline+=\ %{&fileencoding?&fileencoding:&encoding}
set statusline+=\ [%{&fileformat}\]
set statusline+=\ %p%%
set statusline+=\ %l:%c
set statusline+=\ 
      
" -------------------- Sane defaults --------------------{{{1 

" backspace behaves normal
set backspace=indent,eol,start
" Cursor moves over beginning and end of lines
set whichwrap+=<,>,[,]
" Cursor moves over visual lines
nnoremap  <buffer> <silent> <Up>   gk
nnoremap  <buffer> <silent> <Down> gj
inoremap <expr> <buffer> <silent> <Up> pumvisible() ? '<C-P>' : '<C-O>gk'
inoremap <expr> <buffer> <silent> <Down> pumvisible() ? '<C-N>' : '<C-O>gj' 

" Copy Paste

" use last yank
nnoremap yp "0p
nnoremap yP "0P
" force paste on new line
nnoremap ygp o<Esc>"0p
nnoremap ygP O<Esc>"0p

" CTRL-C to copy to system clipboard
map <C-c> "+y<CR>
" leader y and p to access clipboard
nnoremap <Leader>y "+y 
nnoremap <Leader>Y "+Y 
nnoremap <Leader>p "+p 
nnoremap <Leader>P "+P 
" Force paste on new line
nnoremap <Leader>gp o<Esc>"+p 
nnoremap <Leader>gP O<Esc>"+P 

" -------------------- Cursor --------------------{{{1
"
" When editing a file, always jump to the last known cursor position.
" Don't do it when the position is invalid or when inside an event handler
" (happens when dropping a file on gvim).
autocmd BufReadPost *
         \ if line("'\"") >= 1 && line("'\"") <= line("$") |
         \   exe "normal! g`\"" |
         \ endif

" Different cursor shapes in different modes.
let &guicursor = 'n-v-c-sm:block-blinkwait1000-blinkon500-blinkoff500,'
         \          . 'i-c-ci-ve:ver25-blinkwait1000-blinkon500-blinkoff500,'
         \          . 'r-cr-o:hor20-blinkwait1000-blinkon500-blinkoff500'



" -------------------- Key Mappings --------------------{{{1

inoremap <C-S> <esc>:w<cr>
nnoremap <C-S> :w<cr>
" noremap <C-Q> <nop>

vnoremap < <gv
vnoremap > >gv

" Rewrap current paragraph without moving cursor
nnoremap Q gwip

inoremap jk <Esc>


" FZF, Search
nnoremap <C-B> :Buffers<cr>
nnoremap <C-P> :Files<cr>

" clear search highlight with esc
" nnoremap <esc> :noh<return><esc>
" remapping esc leads to strange sideffects in standard vim

" Search current selection
vnoremap // y/\V<C-R>=escape(@",'/\')<CR><CR>


if has("nvim")
   tnoremap <Esc> <C-\><C-n>
endif

" -------------------- Nerdtree --------------------{{{1

" NERDTree toggle
map <C-n> :NERDTreeFind<CR>
let NERDTreeQuitOnOpen=1

" -------------------- Vimwiki --------------------{{{1

" vimwiki - Personal Wiki for Vim
" https://github.com/vimwiki/vimwiki

" autocmd BufRead,BufNewFile /home/kai/notizen/* cd /home/kai/notizen 

" vimwiki with markdown support
" let g:vimwiki_ext2syntax = {'.md': 'markdown', '.markdown': 'markdown', '.mdown': 'markdown'}
" helppage -> :h vimwiki-syntax 
let g:vimwiki_list = [{'path': '~/notizen/', 'ext': '.md', 'syntax': 'markdown'}]
" No vimiwiki support for md files outside the wiki
let g:vimwiki_global_ext = 0
let g:vimwiki_conceallevel = 0
let g:taskwiki_markup_syntax = 'markdown'  
let g:vimwiki_folding = 'expr'
let g:markdown_fenced_languages = ['html', 'python', 'bash=sh']
" Give back tab key for folding...
nmap <Leader>wn <Plug>VimwikiNextLink 
nmap <Leader>wp <Plug>VimwikiPrevLink 

" Do not create pages just by using return
:nmap <Leader>wf <Plug>VimwikiFollowLink

" Notizen
nmap <Leader>n :cd ~/notizen<cr>:e index.md<cr>
" F24 should be S-F12
nmap <Leader>nn :e ~/notizen/scratch.md<CR>Go<CR>### <C-R>=strftime('%Y-%m-%d %H:%M:')<CR> 
nnoremap <Leader>n/ :cd ~/notizen<cr>:Ag<space>
map <LEADER>d :put=strftime('%Y-%m-%d')<CR>10la

" Call mutt with current line, hopefully containing a message id
nnoremap <leader>m yy:terminal ~/dotfiles/mutt/muttjumpwrapper '<c-r><c-o>"'<enter>


" Create a new todo
" for todo.txt: nnoremap <leader>tf :call system("~/dotfiles/bin/vim2task 'vim:<" . expand("%:p") . ">'")<enter>:redraw!<enter>
nnoremap <leader>t :call system("~/dotfiles/bin/vim2task '" . expand("%:p") ."'")<enter>:redraw!<enter>

" Copy current file path to clipboard
nnoremap <leader>c :let @+=expand("%:p")<CR>

" -------------------- Latex --------------------{{{1
let g:tex_flavor='latex'
let g:vimtex_quickfix_open_on_warning = 0


" -------------------- Vim-Slime --------------------{{{1

" let g:slime_target = "neovim"
" let g:slime_python_ipython = 1


"-------------------- Color Scheme --------------------{{{1
set background=dark
set termguicolors
" Theme
syntax enable
colorscheme OceanicNext 
set nospell
set conceallevel=0

" Transparent Background
hi Normal guibg=none ctermbg=none
hi NonText guibg=none ctermbg=none
hi EndOfBuffer guibg=none ctermbg=none
hi Folded guibg=none ctermbg=none 
hi LineNr guibg=none ctermbg=none 

" -------------------- Line Numbers --------------------{{{1
let g:numbertoggle=1
set number relativenumber
" https://jeffkreeftmeijer.com/vim-number/
function! RelNum ()
   if g:numbertoggle
      set relativenumber
   endif
endfunction
function! AbsNum ()
   if g:numbertoggle
      set norelativenumber
   endif
endfunction

augroup numbertoggle
   autocmd!
   autocmd BufEnter,FocusGained,InsertLeave * :call RelNum() 
   autocmd BufLeave,FocusLost,InsertEnter   * :call AbsNum()
augroup END
" highlight LineNr ctermfg=5 ctermbg=4
" highlight CursorLineNr ctermfg=5 ctermbg=4

" -------------------- Line Limit --------------------{{{1

" call matchadd('ColorColumn', '\%81v', 100)
" highlight ColorColumn ctermbg=208 ctermfg=black
"                                                         This is how it looks: foo

" -------------------- Warn color in insert mode --------------------{{{1

highlight  CursorLine ctermbg=124 ctermfg=15
autocmd InsertEnter * set cursorline 
autocmd InsertLeave * set nocursorline 

" -------------------- Misc  --------------------{{{1
command! VRC :e ~/dotfiles/vim/vimrc

" Mail
" Add format option 'w' to add trailing white space, indicating that paragraph
" continues on next line. This is to be used with mutt's 'text_flowed' option.
augroup mail_trailing_whitespace " {
   autocmd!
   autocmd FileType mail setlocal formatoptions+=w
   autocmd FileType mail setlocal textwidth=72
augroup END " }


" persistent undo
" tell it to use an undo file
set undofile
" set a directory to store the undo history
set undodir=~/.vimundo/


" completion
" http://vim.wikia.com/wiki/VimTip1386
set completeopt=longest,menuone
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Syntastic Syntax Checking
" set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
" set statusline+=%*
" 
" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_auto_loc_list = 1
" let g:syntastic_check_on_open = 1
" let g:syntastic_check_on_wq = 0

" Snippets
let g:UltiSnipsSnippetDirectories=[$HOME.'/.vim/UltiSnips']
let g:UltiSnipsExpandTrigger="<tab>"
" Prevent Vimwiki from using Tab in insert mode
let g:vimwiki_table_mappings = 0
let g:UltiSnipsJumpForwardTrigger="<Tab>"
let g:UltiSnipsJumpBackwardTrigger="<S-Tab>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

" Python support
let g:python_host_prog = '/home/kai/.pyenv/versions/neovim2/bin/python'
let g:python3_host_prog = '/home/kai/.pyenv/versions/neovim3/bin/python'


" Image past in Markdown
autocmd FileType markdown nmap <buffer><silent> <leader>i :call mdip#MarkdownClipboardImage()<CR>

" there are some defaults for image directory and image name, you can change them
" let g:mdip_imgdir = 'img'
" let g:mdip_imgname = 'image'

" Resize windows when terminal is resized
" autocmd VimResized * wincmd =
autocmd VimResized * GoldenRatioResize

" -------------------- Goyo, Zen Mode --------------------{{{1 
function! s:goyo_enter()
   let g:numbertoggle=0
   set nonumber norelativenumber
   set linebreak
endfunction

function! s:goyo_leave()
   let g:numbertoggle=1
   set number relativenumber
   set nolinebreak
endfunction

autocmd! User GoyoEnter nested call <SID>goyo_enter()
autocmd! User GoyoLeave nested call <SID>goyo_leave()


" -------------------- coc.nvim --------------------{{{1 
" if hidden is not set, TextEdit might fail.
set hidden

" Some servers have issues with backup files, see #649
set nobackup
set nowritebackup

" Better display for messages
set cmdheight=2

" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=300

" don't give |ins-completion-menu| messages.
set shortmess+=c

" always show signcolumns
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" Or use `complete_info` if your vim support it, like:
" inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Create mappings for function text object, requires document symbols feature of languageserver.
xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)

" Use <TAB> for select selections ranges, needs server support, like: coc-tsserver, coc-python
nmap <silent> <TAB> <Plug>(coc-range-select)
xmap <silent> <TAB> <Plug>(coc-range-select)

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" use `:OR` for organize import of current buffer
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add status line support, for integration with other plugin, checkout `:h coc-status`
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

